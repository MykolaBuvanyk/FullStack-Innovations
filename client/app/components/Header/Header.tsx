'use client';
import { useState, useRef, useEffect } from 'react';
import styles from './Header.module.css';
import { usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';

const Header = () => {
  const pathname = usePathname();
  const router = useRouter();
  const currentLang = pathname.split('/')[1] || 'uk';
  const [isLangDropdownOpen, setIsLangDropdownOpen] = useState(false);
  const [isTelDropdownOpen, setIsTelDropdownOpen] = useState(false);
  const langDropdownRef = useRef(null);
  
  const languages = [
    { code: 'uk', name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en', name: 'English', flag: 'üá¨üáß' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
    { code: 'bg', name: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', flag: 'üáßüá¨' },
    { code: 'el', name: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', flag: 'üá¨üá∑' },
    { code: 'pl', name: 'Polski', flag: 'üáµüá±' },
    { code: 'cs', name: 'ƒåe≈°tina', flag: 'üá®üáø' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'it', name: 'Italiano', flag: 'üáÆüáπ' },
    { code: 'sv', name: 'Svenska', flag: 'üá∏üá™' },
    { code: 'nl', name: 'Nederlands', flag: 'üá≥üá±' },
    { code: 'lb', name: 'L√´tzebuergesch', flag: 'üá±üá∫' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'ga', name: 'Gaeilge', flag: 'üáÆüá™' },
    { code: 'no', name: 'Norsk', flag: 'üá≥üá¥' },
  ];

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–¥ —î –¥—ñ–π—Å–Ω–∏–º –∫–æ–¥–æ–º –º–æ–≤–∏ –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É
  const isValidLanguageCode = (code) => {
    return languages.some(lang => lang.code === code);
  };

  const getNewPath = (langCode) => {
    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —à–ª—è—Ö –±–µ–∑ –ª—ñ–¥–∏—Ä—É—é—á–æ–≥–æ "/"
    const pathWithoutLeadingSlash = pathname.startsWith('/') ? pathname.slice(1) : pathname;
    
    // –†–æ–∑–±–∏–≤–∞—î–º–æ —à–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    const pathParts = pathWithoutLeadingSlash.split('/');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Ü–µ –∫–æ–¥ –º–æ–≤–∏
    if (pathParts.length > 0 && isValidLanguageCode(pathParts[0])) {
      // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–¥ –º–æ–≤–∏ –Ω–∞ –Ω–æ–≤–∏–π
      pathParts[0] = langCode;
    } else {
      // –Ø–∫—â–æ –ø–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –Ω–µ —î –∫–æ–¥–æ–º –º–æ–≤–∏, –¥–æ–¥–∞—î–º–æ –∫–æ–¥ –º–æ–≤–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
      pathParts.unshift(langCode);
    }
    
    // –ó–±–∏—Ä–∞—î–º–æ —à–ª—è—Ö –Ω–∞–∑–∞–¥ –∑ –ª—ñ–¥–∏—Ä—É—é—á–∏–º "/"
    return '/' + pathParts.join('/');
  };

  const handleLanguageChange = (langCode) => {
    document.cookie = `preferred-locale=${langCode}; path=/; max-age=${60 * 60 * 24 * 30}`; // 30 –¥–Ω—ñ–≤
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∑–∞–º—ñ—Å—Ç—å Link –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é
    const newPath = getNewPath(langCode);
    router.push(newPath);
    
    setIsLangDropdownOpen(false);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (langDropdownRef.current && !langDropdownRef.current.contains(event.target)) {
        setIsLangDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <header className={styles.header}>
      <div className={styles.container}>
        <ul className={styles.headerWrapper}>
          <li className={styles.headerWrapperEl}>
            <Link href={`/${currentLang}`}>
              <img className={styles.logoImage} src="/images/logo.png" alt="" />
            </Link>
          </li>
          <li className={styles.headerWrapperEl}>
            <ul className={styles.headerList}>
              <li className={styles.headerEl}>
                <Link href={`/${currentLang}`}>–ì–æ–ª–æ–≤–Ω–∞</Link>
              </li>
              <li className={[styles.headerEl, styles.headerDropdown].join(' ')}>
                –ü–æ—Å–ª—É–≥–∏
                <i className="fa-solid fa-chevron-down"></i>
              </li>
              <li className={styles.headerEl}>
                <Link href={`/${currentLang}/portfolio`}>–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ</Link>
              </li>
              <li className={styles.headerEl}>
                <Link href={`/${currentLang}/about`}>–ü—Ä–æ –Ω–∞—Å</Link>
              </li>
              <li className={styles.headerEl}>
                <Link href={`/partnership`}>–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ</Link>
              </li>
              <li className={styles.headerEl}>
                <Link href={`/${currentLang}/blog`}>–ë–ª–æ–≥</Link>
              </li>
              <li className={styles.headerEl}>
                <Link href={`/${currentLang}/contacts`}>–ö–æ–Ω—Ç–∞–∫—Ç–∏</Link>
              </li>
            </ul>
          </li>
          <li className={styles.headerWrapperEl}>
            <div className={styles.headerTel}>
              <a href="tel:+380636826299">
                <span>üá∫üá¶</span> +(380) 63 682 6299
              </a>
              <i 
                className={`fa-solid fa-chevron-${isTelDropdownOpen ? 'up' : 'down'}`}
                onClick={() => setIsTelDropdownOpen(!isTelDropdownOpen)}
              ></i>
            </div>
            <div className={styles.headerLang} ref={langDropdownRef}>
              <div 
                className={styles.langSelector}
                onClick={() => setIsLangDropdownOpen(!isLangDropdownOpen)}
              >
                <span>{currentLang.toUpperCase()}</span>
                <i className={`fa-solid fa-chevron-${isLangDropdownOpen ? 'up' : 'down'}`}></i>
              </div>
              {isLangDropdownOpen && (
                <div className={styles.langDropdown}>
                  {languages.map((lang) => (
                    <div 
                      key={lang.code}
                      onClick={() => handleLanguageChange(lang.code)}
                      className={styles.langOption}
                    >
                      <span>{lang.flag}</span>
                      <span>{lang.name}</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </li>
        </ul>
      </div>
    </header>
  );
};

export default Header;